#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app   = require('../app');
var debug = require('debug')('redovisa:server');
var http  = require('http');
const {socketContainer}  = require('../src/socket-container');

// https://codeburst.io/isomorphic-web-app-react-js-express-socket-io-e2f03a469cd3

/**
 * Get port from environment and store in Express.
 */



port = process.env.DBWEBB_PORT || 1337;

if ('DBWEBB_PORT' in process.env) {
    console.log(`DBWEBB_PORT set, using ${process.env.DBWEBB_PORT}`);
}

console.log(`Server running on localhost:${port}`);
app.set('port', port);

/**
 * Create HTTP server.
 */

// Create server and make socket listen to server
var server      = http.createServer(app);
const modules = [{module:require('../src/chat').chat, name:"chat"}]
socketContainer(server, modules);



/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Socket.io
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
